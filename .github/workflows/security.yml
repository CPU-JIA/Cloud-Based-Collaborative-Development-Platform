name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday

permissions:
  contents: read
  security-events: write

jobs:
  code-scanning:
    name: Code Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: go, javascript
        queries: security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
  container-scanning:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [iam-service, project-service, file-service, git-gateway-service]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t cloud-platform-${{ matrix.service }}:scanning -f ./cmd/${{ matrix.service }}/Dockerfile .
        
    - name: Run Trivy scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: cloud-platform-${{ matrix.service }}:scanning
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
        
    - name: Run Grype scanner
      uses: anchore/scan-action@v3
      with:
        image: cloud-platform-${{ matrix.service }}:scanning
        fail-build: true
        severity-cutoff: high
        
  secrets-scanning:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        
  infrastructure-scanning:
    name: Infrastructure as Code Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: kubernetes,dockerfile,github_actions
        quiet: false
        soft_fail: false
        
    - name: Run Terrascan
      run: |
        docker run --rm -v "$(pwd):/src" tenable/terrascan scan -t k8s -f /src/k8s
        
  dependency-scanning:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'cloud-platform'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          
    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports
        
  api-security-testing:
    name: API Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Start services
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to start
        
    - name: Run OWASP ZAP API Scan
      uses: zaproxy/action-api-scan@v0.4.0
      with:
        target: 'http://localhost:8080/api/v1'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Run API Fuzzing
      run: |
        docker run --rm -v $(pwd):/app -t owasp/zap2docker-stable zap-api-scan.py \
          -t http://localhost:8080/api/v1/openapi.json \
          -f openapi \
          -r api-fuzzing-report.html
          
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CIS Benchmark
      run: |
        docker run --rm -v $(pwd):/src cisecurity/cis-kubernetes-benchmark:latest \
          run --include-test-output --config /src/k8s
          
    - name: Run Security Policy Check
      run: |
        ./scripts/verify_security.sh
        
    - name: Generate Security Report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "## Summary" >> security-report.md
        echo "- Code scanning: ✅" >> security-report.md
        echo "- Container scanning: ✅" >> security-report.md
        echo "- Secrets scanning: ✅" >> security-report.md
        echo "- Dependency scanning: ✅" >> security-report.md
        echo "- API security: ✅" >> security-report.md
        echo "- Compliance: ✅" >> security-report.md
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md