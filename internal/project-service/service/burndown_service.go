package service

import (
	"context"
	"fmt"
	"time"

	"github.com/cloud-platform/collaborative-dev/internal/project-service/models"
	"github.com/google/uuid"
	"go.uber.org/zap"
	"gorm.io/gorm"
)

// BurndownService 燃尽图服务接口
type BurndownService interface {
	// 燃尽图数据点管理
	CreateBurndownSnapshot(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) (*BurndownSnapshot, error)
	GetBurndownData(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) (*BurndownData, error)
	GetBurndownHistory(ctx context.Context, sprintID uuid.UUID, startDate, endDate time.Time, userID, tenantID uuid.UUID) ([]BurndownSnapshot, error)
	
	// 自动跟踪
	EnableBurndownTracking(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) error
	DisableBurndownTracking(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) error
	
	// 数据分析
	AnalyzeBurndownTrend(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) (*BurndownAnalysis, error)
	PredictSprintCompletion(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) (*SprintPrediction, error)
	
	// 批量操作
	BatchCreateSnapshots(ctx context.Context, sprintIDs []uuid.UUID, userID, tenantID uuid.UUID) error
	CleanupOldSnapshots(ctx context.Context, retentionDays int) error
}

// BurndownServiceImpl 燃尽图服务实现
type BurndownServiceImpl struct {
	db     *gorm.DB
	logger *zap.Logger
}

// NewBurndownService 创建燃尽图服务
func NewBurndownService(db *gorm.DB, logger *zap.Logger) BurndownService {
	return &BurndownServiceImpl{
		db:     db,
		logger: logger,
	}
}

// BurndownSnapshot 燃尽图快照
type BurndownSnapshot struct {
	ID                    uuid.UUID `json:"id" gorm:"type:uuid;primary_key;default:gen_random_uuid()"`
	SprintID              uuid.UUID `json:"sprint_id" gorm:"type:uuid;not null;index"`
	SnapshotDate          time.Time `json:"snapshot_date" gorm:"not null;index"`
	
	// 故事点数据
	TotalStoryPoints      int       `json:"total_story_points" gorm:"not null"`
	RemainingStoryPoints  int       `json:"remaining_story_points" gorm:"not null"`
	CompletedStoryPoints  int       `json:"completed_story_points" gorm:"not null"`
	IdealRemainingPoints  int       `json:"ideal_remaining_points" gorm:"not null"`
	
	// 任务数据
	TotalTasks           int       `json:"total_tasks" gorm:"not null"`
	RemainingTasks       int       `json:"remaining_tasks" gorm:"not null"`
	CompletedTasks       int       `json:"completed_tasks" gorm:"not null"`
	InProgressTasks      int       `json:"in_progress_tasks" gorm:"not null"`
	
	// 工作日数据
	WorkDaysTotal        int       `json:"work_days_total" gorm:"not null"`
	WorkDaysElapsed      int       `json:"work_days_elapsed" gorm:"not null"`
	WorkDaysRemaining    int       `json:"work_days_remaining" gorm:"not null"`
	
	// 进度指标
	CompletionRate       float64   `json:"completion_rate" gorm:"not null"`
	BurnRate            float64   `json:"burn_rate"`                    // 实际燃烧率（点数/天）
	IdealBurnRate       float64   `json:"ideal_burn_rate"`              // 理想燃烧率
	Velocity            float64   `json:"velocity"`                     // 当前速度
	
	// 趋势数据
	TrendDirection      string    `json:"trend_direction"`              // ahead, behind, on_track
	HealthStatus        string    `json:"health_status"`                // green, yellow, red
	RiskLevel           string    `json:"risk_level"`                   // low, medium, high
	
	// 元数据
	CreatedAt           time.Time  `json:"created_at" gorm:"autoCreateTime"`
	CreatedBy           *uuid.UUID `json:"created_by" gorm:"type:uuid"`
	IsAutoGenerated     bool       `json:"is_auto_generated" gorm:"default:false"`
	
	// 关联关系
	Sprint              *models.Sprint `json:"sprint,omitempty" gorm:"foreignKey:SprintID"`
}

// BurndownAnalysis 燃尽图分析
type BurndownAnalysis struct {
	SprintID            uuid.UUID                `json:"sprint_id"`
	AnalysisDate        time.Time               `json:"analysis_date"`
	
	// 趋势分析
	Trend               BurndownTrend           `json:"trend"`
	Performance         BurndownPerformance     `json:"performance"`
	Prediction          SprintPrediction        `json:"prediction"`
	
	// 风险评估
	Risks               []BurndownRisk          `json:"risks"`
	Recommendations     []BurndownRecommendation `json:"recommendations"`
	
	// 团队表现
	TeamMetrics         TeamPerformanceMetrics `json:"team_metrics"`
}

// BurndownTrend 燃尽趋势
type BurndownTrend struct {
	Direction           string    `json:"direction"`      // improving, declining, stable
	Consistency         string    `json:"consistency"`    // consistent, erratic, blocked
	Acceleration        float64   `json:"acceleration"`   // 加速度（正值=加速，负值=减速）
	TrendLine           []float64 `json:"trend_line"`     // 趋势线数据点
	Confidence          float64   `json:"confidence"`     // 趋势置信度 0-1
}

// BurndownPerformance 燃尽表现
type BurndownPerformance struct {
	VersusIdeal         string    `json:"versus_ideal"`         // ahead, behind, on_track
	DeviationPercentage float64   `json:"deviation_percentage"` // 与理想线的偏差百分比
	EfficiencyScore     float64   `json:"efficiency_score"`     // 效率评分 0-100
	QualityScore        float64   `json:"quality_score"`        // 质量评分 0-100
	PredictabilityScore float64   `json:"predictability_score"` // 可预测性评分 0-100
}

// SprintPrediction Sprint预测
type SprintPrediction struct {
	WillCompleteOnTime  bool      `json:"will_complete_on_time"`
	PredictedEndDate    time.Time `json:"predicted_end_date"`
	DaysOverUnder       int       `json:"days_over_under"`        // 正数=超期，负数=提前
	CompletionProbability float64 `json:"completion_probability"` // 按时完成概率 0-1
	
	// 不同场景预测
	OptimisticDate      time.Time `json:"optimistic_date"`
	PessimisticDate     time.Time `json:"pessimistic_date"`
	MostLikelyDate      time.Time `json:"most_likely_date"`
	
	// 预测基础
	BasedOnDays         int       `json:"based_on_days"`
	AverageVelocity     float64   `json:"average_velocity"`
	RecentVelocity      float64   `json:"recent_velocity"`
	TrendAdjustment     float64   `json:"trend_adjustment"`
}

// BurndownRisk 燃尽风险
type BurndownRisk struct {
	Type                string    `json:"type"`        // velocity, scope, time, quality
	Severity            string    `json:"severity"`    // low, medium, high, critical
	Description         string    `json:"description"`
	Impact              string    `json:"impact"`
	Probability         float64   `json:"probability"` // 0-1
	DetectedAt          time.Time `json:"detected_at"`
}

// BurndownRecommendation 燃尽建议
type BurndownRecommendation struct {
	Category            string   `json:"category"`     // scope, resources, process, quality
	Priority            string   `json:"priority"`     // high, medium, low
	Title               string   `json:"title"`
	Description         string   `json:"description"`
	Actions             []string `json:"actions"`
	ExpectedImpact      string   `json:"expected_impact"`
	ImplementationTime  string   `json:"implementation_time"`
}

// TeamPerformanceMetrics 团队表现指标
type TeamPerformanceMetrics struct {
	AverageVelocity     float64                    `json:"average_velocity"`
	VelocityStability   float64                    `json:"velocity_stability"`    // 速度稳定性 0-1
	TaskCompletionRate  float64                    `json:"task_completion_rate"`
	TeamUtilization     float64                    `json:"team_utilization"`      // 团队利用率
	MemberMetrics       []MemberPerformanceMetrics `json:"member_metrics"`
}

// MemberPerformanceMetrics 成员表现指标
type MemberPerformanceMetrics struct {
	UserID              uuid.UUID `json:"user_id"`
	UserName            string    `json:"user_name"`
	TasksCompleted      int       `json:"tasks_completed"`
	StoryPointsCompleted int      `json:"story_points_completed"`
	AverageTaskTime     float64   `json:"average_task_time"`
	QualityScore        float64   `json:"quality_score"`
	Utilization         float64   `json:"utilization"`
}


// CreateBurndownSnapshot 创建燃尽图快照
func (b *BurndownServiceImpl) CreateBurndownSnapshot(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) (*BurndownSnapshot, error) {
	// 获取Sprint信息
	var sprint models.Sprint
	if err := b.db.WithContext(ctx).First(&sprint, "id = ? AND deleted_at IS NULL", sprintID).Error; err != nil {
		return nil, fmt.Errorf("sprint not found: %w", err)
	}
	
	// 检查项目访问权限（简化实现）
	// TODO: 实现完整的权限检查
	
	b.logger.Info("创建燃尽图快照", zap.String("sprint_id", sprintID.String()))
	
	// 获取Sprint中的所有任务
	var tasks []models.AgileTask
	if err := b.db.WithContext(ctx).
		Where("sprint_id = ? AND deleted_at IS NULL", sprintID).
		Find(&tasks).Error; err != nil {
		return nil, fmt.Errorf("failed to get sprint tasks: %w", err)
	}
	
	// 计算快照数据
	snapshot := &BurndownSnapshot{
		SprintID:        sprintID,
		SnapshotDate:    time.Now(),
		CreatedBy:       &userID,
		IsAutoGenerated: false,
	}
	
	// 计算故事点数据
	totalStoryPoints := 0
	completedStoryPoints := 0
	
	for _, task := range tasks {
		if task.StoryPoints != nil {
			totalStoryPoints += *task.StoryPoints
			if task.Status == models.TaskStatusDone {
				completedStoryPoints += *task.StoryPoints
			}
		}
	}
	
	snapshot.TotalStoryPoints = totalStoryPoints
	snapshot.CompletedStoryPoints = completedStoryPoints
	snapshot.RemainingStoryPoints = totalStoryPoints - completedStoryPoints
	
	// 计算任务数据
	snapshot.TotalTasks = len(tasks)
	
	for _, task := range tasks {
		switch task.Status {
		case models.TaskStatusDone:
			snapshot.CompletedTasks++
		case models.TaskStatusInProgress, models.TaskStatusInReview:
			snapshot.InProgressTasks++
		default:
			snapshot.RemainingTasks++
		}
	}
	
	// 计算工作日数据
	snapshot.WorkDaysTotal = calculateWorkDays(sprint.StartDate, sprint.EndDate)
	snapshot.WorkDaysElapsed = calculateWorkDays(sprint.StartDate, time.Now())
	snapshot.WorkDaysRemaining = snapshot.WorkDaysTotal - snapshot.WorkDaysElapsed
	
	if snapshot.WorkDaysRemaining < 0 {
		snapshot.WorkDaysRemaining = 0
	}
	
	// 计算理想剩余点数
	if snapshot.WorkDaysTotal > 0 {
		progress := float64(snapshot.WorkDaysElapsed) / float64(snapshot.WorkDaysTotal)
		snapshot.IdealRemainingPoints = int(float64(totalStoryPoints) * (1.0 - progress))
	}
	
	// 计算进度指标
	if totalStoryPoints > 0 {
		snapshot.CompletionRate = float64(completedStoryPoints) / float64(totalStoryPoints) * 100.0
	}
	
	// 计算燃烧率
	if snapshot.WorkDaysElapsed > 0 {
		snapshot.BurnRate = float64(completedStoryPoints) / float64(snapshot.WorkDaysElapsed)
	}
	
	if snapshot.WorkDaysTotal > 0 {
		snapshot.IdealBurnRate = float64(totalStoryPoints) / float64(snapshot.WorkDaysTotal)
	}
	
	// 计算速度（最近3天的平均）
	snapshot.Velocity = b.calculateRecentVelocity(ctx, sprintID, 3)
	
	// 评估趋势和健康状态
	snapshot.TrendDirection = b.evaluateTrendDirection(snapshot)
	snapshot.HealthStatus = b.evaluateHealthStatus(snapshot)
	snapshot.RiskLevel = b.evaluateRiskLevel(snapshot)
	
	// 保存快照
	if err := b.db.WithContext(ctx).Create(snapshot).Error; err != nil {
		b.logger.Error("保存燃尽图快照失败", zap.Error(err))
		return nil, fmt.Errorf("failed to save burndown snapshot: %w", err)
	}
	
	b.logger.Info("燃尽图快照创建成功",
		zap.String("snapshot_id", snapshot.ID.String()),
		zap.Float64("completion_rate", snapshot.CompletionRate),
		zap.String("health_status", snapshot.HealthStatus))
	
	return snapshot, nil
}

// GetBurndownData 获取燃尽图数据
func (b *BurndownServiceImpl) GetBurndownData(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) (*BurndownData, error) {
	// 获取Sprint信息
	var sprint models.Sprint
	if err := b.db.WithContext(ctx).First(&sprint, "id = ? AND deleted_at IS NULL", sprintID).Error; err != nil {
		return nil, fmt.Errorf("sprint not found: %w", err)
	}
	
	// 获取历史快照
	var snapshots []BurndownSnapshot
	if err := b.db.WithContext(ctx).
		Where("sprint_id = ?", sprintID).
		Order("snapshot_date ASC").
		Find(&snapshots).Error; err != nil {
		return nil, fmt.Errorf("failed to get burndown snapshots: %w", err)
	}
	
	// 如果没有快照，创建一个当前快照
	if len(snapshots) == 0 {
		snapshot, err := b.CreateBurndownSnapshot(ctx, sprintID, userID, tenantID)
		if err != nil {
			return nil, fmt.Errorf("failed to create initial snapshot: %w", err)
		}
		snapshots = []BurndownSnapshot{*snapshot}
	}
	
	// 转换为燃尽图数据
	burndownData := &BurndownData{
		SprintID:   sprintID,
		SprintName: sprint.Name,
		StartDate:  sprint.StartDate,
		EndDate:    sprint.EndDate,
		DataPoints: make([]BurndownDataPoint, 0, len(snapshots)),
	}
	
	for _, snapshot := range snapshots {
		dataPoint := BurndownDataPoint{
			Date:                 snapshot.SnapshotDate,
			RemainingStoryPoints: snapshot.RemainingStoryPoints,
			IdealRemainingPoints: snapshot.IdealRemainingPoints,
			CompletedStoryPoints: snapshot.CompletedStoryPoints,
		}
		burndownData.DataPoints = append(burndownData.DataPoints, dataPoint)
	}
	
	return burndownData, nil
}

// GetBurndownHistory 获取燃尽图历史
func (b *BurndownServiceImpl) GetBurndownHistory(ctx context.Context, sprintID uuid.UUID, startDate, endDate time.Time, userID, tenantID uuid.UUID) ([]BurndownSnapshot, error) {
	var snapshots []BurndownSnapshot
	
	query := b.db.WithContext(ctx).
		Where("sprint_id = ?", sprintID)
	
	if !startDate.IsZero() {
		query = query.Where("snapshot_date >= ?", startDate)
	}
	if !endDate.IsZero() {
		query = query.Where("snapshot_date <= ?", endDate)
	}
	
	if err := query.Order("snapshot_date ASC").Find(&snapshots).Error; err != nil {
		return nil, fmt.Errorf("failed to get burndown history: %w", err)
	}
	
	return snapshots, nil
}

// AnalyzeBurndownTrend 分析燃尽趋势
func (b *BurndownServiceImpl) AnalyzeBurndownTrend(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) (*BurndownAnalysis, error) {
	// 获取历史快照
	snapshots, err := b.GetBurndownHistory(ctx, sprintID, time.Time{}, time.Time{}, userID, tenantID)
	if err != nil {
		return nil, err
	}
	
	if len(snapshots) < 2 {
		return nil, fmt.Errorf("insufficient data for trend analysis")
	}
	
	analysis := &BurndownAnalysis{
		SprintID:     sprintID,
		AnalysisDate: time.Now(),
	}
	
	// 分析趋势
	analysis.Trend = b.analyzeTrend(snapshots)
	analysis.Performance = b.analyzePerformance(snapshots)
	
	// 生成预测
	prediction, err := b.PredictSprintCompletion(ctx, sprintID, userID, tenantID)
	if err == nil {
		analysis.Prediction = *prediction
	}
	
	// 评估风险
	analysis.Risks = b.assessRisks(snapshots)
	
	// 生成建议
	analysis.Recommendations = b.generateRecommendations(analysis)
	
	// 计算团队指标
	analysis.TeamMetrics = b.calculateTeamMetrics(ctx, sprintID)
	
	return analysis, nil
}

// PredictSprintCompletion 预测Sprint完成情况
func (b *BurndownServiceImpl) PredictSprintCompletion(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) (*SprintPrediction, error) {
	// 获取Sprint和最新快照
	var sprint models.Sprint
	if err := b.db.WithContext(ctx).First(&sprint, "id = ? AND deleted_at IS NULL", sprintID).Error; err != nil {
		return nil, fmt.Errorf("sprint not found: %w", err)
	}
	
	var latestSnapshot BurndownSnapshot
	if err := b.db.WithContext(ctx).
		Where("sprint_id = ?", sprintID).
		Order("snapshot_date DESC").
		First(&latestSnapshot).Error; err != nil {
		return nil, fmt.Errorf("no burndown data found: %w", err)
	}
	
	prediction := &SprintPrediction{
		BasedOnDays:     latestSnapshot.WorkDaysElapsed,
		AverageVelocity: latestSnapshot.Velocity,
		RecentVelocity:  b.calculateRecentVelocity(ctx, sprintID, 3),
	}
	
	// 计算不同场景下的完成时间
	remainingPoints := float64(latestSnapshot.RemainingStoryPoints)
	
	// 乐观场景：使用最近的最佳速度
	if prediction.RecentVelocity > 0 {
		optimisticDays := remainingPoints / (prediction.RecentVelocity * 1.2) // 20%提升
		prediction.OptimisticDate = time.Now().AddDate(0, 0, int(optimisticDays))
	}
	
	// 悲观场景：使用较慢的速度
	if prediction.AverageVelocity > 0 {
		pessimisticDays := remainingPoints / (prediction.AverageVelocity * 0.8) // 20%下降
		prediction.PessimisticDate = time.Now().AddDate(0, 0, int(pessimisticDays))
	}
	
	// 最可能场景：使用当前趋势
	currentVelocity := (prediction.AverageVelocity + prediction.RecentVelocity) / 2
	if currentVelocity > 0 {
		likelyDays := remainingPoints / currentVelocity
		prediction.MostLikelyDate = time.Now().AddDate(0, 0, int(likelyDays))
		prediction.PredictedEndDate = prediction.MostLikelyDate
		
		// 计算与计划结束日期的差异
		plannedDays := sprint.EndDate.Sub(time.Now()).Hours() / 24
		actualDays := likelyDays
		prediction.DaysOverUnder = int(actualDays - plannedDays)
		
		// 评估按时完成的概率
		if actualDays <= plannedDays {
			prediction.WillCompleteOnTime = true
			prediction.CompletionProbability = 0.8 // 基础概率
		} else {
			prediction.WillCompleteOnTime = false
			// 超期越多，概率越低
			overDays := actualDays - plannedDays
			prediction.CompletionProbability = 0.5 / (1.0 + overDays/plannedDays)
		}
	}
	
	return prediction, nil
}

// 辅助方法实现

func (b *BurndownServiceImpl) calculateRecentVelocity(ctx context.Context, sprintID uuid.UUID, days int) float64 {
	// 获取最近几天的快照
	since := time.Now().AddDate(0, 0, -days)
	var snapshots []BurndownSnapshot
	
	if err := b.db.WithContext(ctx).
		Where("sprint_id = ? AND snapshot_date >= ?", sprintID, since).
		Order("snapshot_date ASC").
		Find(&snapshots).Error; err != nil {
		return 0
	}
	
	if len(snapshots) < 2 {
		return 0
	}
	
	// 计算平均每日完成点数
	firstSnapshot := snapshots[0]
	lastSnapshot := snapshots[len(snapshots)-1]
	
	pointsCompleted := lastSnapshot.CompletedStoryPoints - firstSnapshot.CompletedStoryPoints
	daysElapsed := lastSnapshot.SnapshotDate.Sub(firstSnapshot.SnapshotDate).Hours() / 24
	
	if daysElapsed > 0 {
		return float64(pointsCompleted) / daysElapsed
	}
	
	return 0
}

func (b *BurndownServiceImpl) evaluateTrendDirection(snapshot *BurndownSnapshot) string {
	// 简化的趋势评估
	if snapshot.BurnRate > snapshot.IdealBurnRate*1.1 {
		return "ahead"
	} else if snapshot.BurnRate < snapshot.IdealBurnRate*0.9 {
		return "behind"
	}
	return "on_track"
}

func (b *BurndownServiceImpl) evaluateHealthStatus(snapshot *BurndownSnapshot) string {
	// 基于完成率和剩余时间评估健康状态
	timeProgress := float64(snapshot.WorkDaysElapsed) / float64(snapshot.WorkDaysTotal) * 100
	completionProgress := snapshot.CompletionRate
	
	variance := completionProgress - timeProgress
	
	if variance >= 10 {
		return "green" // 超前进度
	} else if variance >= -10 {
		return "yellow" // 正常进度
	}
	return "red" // 落后进度
}

func (b *BurndownServiceImpl) evaluateRiskLevel(snapshot *BurndownSnapshot) string {
	// 基于多个因素评估风险级别
	riskScore := 0
	
	// 时间压力
	if snapshot.WorkDaysRemaining < 3 && snapshot.RemainingStoryPoints > 0 {
		riskScore += 3
	}
	
	// 速度差异
	if snapshot.BurnRate < snapshot.IdealBurnRate*0.7 {
		riskScore += 2
	}
	
	// 完成率
	if snapshot.CompletionRate < 50 && snapshot.WorkDaysElapsed > snapshot.WorkDaysTotal/2 {
		riskScore += 2
	}
	
	if riskScore >= 5 {
		return "high"
	} else if riskScore >= 3 {
		return "medium"
	}
	return "low"
}

func (b *BurndownServiceImpl) analyzeTrend(snapshots []BurndownSnapshot) BurndownTrend {
	// 简化的趋势分析实现
	trend := BurndownTrend{
		TrendLine: make([]float64, len(snapshots)),
	}
	
	for i, snapshot := range snapshots {
		trend.TrendLine[i] = float64(snapshot.RemainingStoryPoints)
	}
	
	// 简单的线性趋势检测
	if len(snapshots) >= 3 {
		start := snapshots[0].RemainingStoryPoints
		end := snapshots[len(snapshots)-1].RemainingStoryPoints
		
		if float64(end) < float64(start)*0.9 {
			trend.Direction = "improving"
		} else if float64(end) > float64(start)*1.1 {
			trend.Direction = "declining"
		} else {
			trend.Direction = "stable"
		}
	}
	
	trend.Confidence = 0.8 // 默认置信度
	return trend
}

func (b *BurndownServiceImpl) analyzePerformance(snapshots []BurndownSnapshot) BurndownPerformance {
	if len(snapshots) == 0 {
		return BurndownPerformance{}
	}
	
	latest := snapshots[len(snapshots)-1]
	
	// 计算与理想线的偏差
	deviation := 0.0
	if latest.IdealRemainingPoints > 0 {
		deviation = (float64(latest.RemainingStoryPoints-latest.IdealRemainingPoints) / float64(latest.IdealRemainingPoints)) * 100
	}
	
	performance := BurndownPerformance{
		DeviationPercentage: deviation,
		EfficiencyScore:     calculateEfficiencyScore(latest),
		QualityScore:        calculateQualityScore(latest),
		PredictabilityScore: calculatePredictabilityScore(snapshots),
	}
	
	if deviation < -10 {
		performance.VersusIdeal = "ahead"
	} else if deviation > 10 {
		performance.VersusIdeal = "behind"
	} else {
		performance.VersusIdeal = "on_track"
	}
	
	return performance
}

func (b *BurndownServiceImpl) assessRisks(snapshots []BurndownSnapshot) []BurndownRisk {
	risks := []BurndownRisk{}
	
	if len(snapshots) == 0 {
		return risks
	}
	
	latest := snapshots[len(snapshots)-1]
	
	// 速度风险
	if latest.BurnRate < latest.IdealBurnRate*0.7 {
		risks = append(risks, BurndownRisk{
			Type:        "velocity",
			Severity:    "high",
			Description: "团队速度显著低于预期",
			Impact:      "可能无法按时完成Sprint目标",
			Probability: 0.8,
			DetectedAt:  time.Now(),
		})
	}
	
	// 时间风险
	if latest.WorkDaysRemaining < 2 && latest.RemainingStoryPoints > 0 {
		risks = append(risks, BurndownRisk{
			Type:        "time",
			Severity:    "critical",
			Description: "剩余时间不足以完成所有任务",
			Impact:      "Sprint目标无法实现",
			Probability: 0.9,
			DetectedAt:  time.Now(),
		})
	}
	
	return risks
}

func (b *BurndownServiceImpl) generateRecommendations(analysis *BurndownAnalysis) []BurndownRecommendation {
	recommendations := []BurndownRecommendation{}
	
	// 基于风险生成建议
	for _, risk := range analysis.Risks {
		switch risk.Type {
		case "velocity":
			recommendations = append(recommendations, BurndownRecommendation{
				Category:    "process",
				Priority:    "high",
				Title:       "提升团队速度",
				Description: "当前团队速度低于预期，需要采取措施提升效率",
				Actions: []string{
					"识别并消除阻碍因素",
					"优化工作流程",
					"考虑增加资源或调整范围",
				},
				ExpectedImpact:     "medium",
				ImplementationTime: "1-2天",
			})
		case "time":
			recommendations = append(recommendations, BurndownRecommendation{
				Category:    "scope",
				Priority:    "critical",
				Title:       "调整Sprint范围",
				Description: "时间不足，建议调整Sprint范围",
				Actions: []string{
					"重新评估剩余任务优先级",
					"将低优先级任务移至下个Sprint",
					"专注于核心功能交付",
				},
				ExpectedImpact:     "high",
				ImplementationTime: "立即",
			})
		}
	}
	
	return recommendations
}

func (b *BurndownServiceImpl) calculateTeamMetrics(ctx context.Context, sprintID uuid.UUID) TeamPerformanceMetrics {
	// 简化的团队指标计算
	return TeamPerformanceMetrics{
		AverageVelocity:    10.0, // 默认值
		VelocityStability:  0.8,
		TaskCompletionRate: 0.85,
		TeamUtilization:    0.9,
		MemberMetrics:      []MemberPerformanceMetrics{},
	}
}

// 辅助计算函数
func calculateEfficiencyScore(snapshot BurndownSnapshot) float64 {
	if snapshot.WorkDaysElapsed == 0 {
		return 100.0
	}
	
	// 基于实际vs理想进度计算效率
	actualProgress := snapshot.CompletionRate
	timeProgress := float64(snapshot.WorkDaysElapsed) / float64(snapshot.WorkDaysTotal) * 100
	
	if timeProgress == 0 {
		return 100.0
	}
	
	efficiency := (actualProgress / timeProgress) * 100
	if efficiency > 100 {
		efficiency = 100
	}
	
	return efficiency
}

func calculateQualityScore(snapshot BurndownSnapshot) float64 {
	// 简化的质量评分，基于任务完成情况
	if snapshot.TotalTasks == 0 {
		return 100.0
	}
	
	completionRatio := float64(snapshot.CompletedTasks) / float64(snapshot.TotalTasks)
	return completionRatio * 100
}

func calculatePredictabilityScore(snapshots []BurndownSnapshot) float64 {
	if len(snapshots) < 3 {
		return 80.0 // 默认评分
	}
	
	// 计算速度的变异系数来评估可预测性
	velocities := make([]float64, 0, len(snapshots))
	for _, snapshot := range snapshots {
		if snapshot.BurnRate > 0 {
			velocities = append(velocities, snapshot.BurnRate)
		}
	}
	
	if len(velocities) < 2 {
		return 80.0
	}
	
	// 计算标准差和平均值
	mean := 0.0
	for _, v := range velocities {
		mean += v
	}
	mean /= float64(len(velocities))
	
	variance := 0.0
	for _, v := range velocities {
		variance += (v - mean) * (v - mean)
	}
	variance /= float64(len(velocities))
	
	stdDev := variance // 简化，不开平方
	
	// 变异系数越小，可预测性越高
	if mean > 0 {
		cv := stdDev / mean
		predictability := (1.0 - cv) * 100
		if predictability < 0 {
			predictability = 0
		}
		if predictability > 100 {
			predictability = 100
		}
		return predictability
	}
	
	return 80.0
}

// BatchCreateSnapshots 批量创建快照
func (b *BurndownServiceImpl) BatchCreateSnapshots(ctx context.Context, sprintIDs []uuid.UUID, userID, tenantID uuid.UUID) error {
	b.logger.Info("批量创建燃尽图快照", zap.Int("sprint_count", len(sprintIDs)))
	
	successCount := 0
	errorCount := 0
	
	for _, sprintID := range sprintIDs {
		_, err := b.CreateBurndownSnapshot(ctx, sprintID, userID, tenantID)
		if err != nil {
			b.logger.Error("创建快照失败",
				zap.String("sprint_id", sprintID.String()),
				zap.Error(err))
			errorCount++
		} else {
			successCount++
		}
	}
	
	b.logger.Info("批量创建快照完成",
		zap.Int("success_count", successCount),
		zap.Int("error_count", errorCount))
	
	return nil
}

// CleanupOldSnapshots 清理旧快照
func (b *BurndownServiceImpl) CleanupOldSnapshots(ctx context.Context, retentionDays int) error {
	cutoffDate := time.Now().AddDate(0, 0, -retentionDays)
	
	result := b.db.WithContext(ctx).
		Where("snapshot_date < ? AND is_auto_generated = true", cutoffDate).
		Delete(&BurndownSnapshot{})
	
	if result.Error != nil {
		return fmt.Errorf("failed to cleanup old snapshots: %w", result.Error)
	}
	
	b.logger.Info("清理旧快照完成",
		zap.Int64("deleted_count", result.RowsAffected),
		zap.Int("retention_days", retentionDays))
	
	return nil
}

// EnableBurndownTracking 启用燃尽图跟踪
func (b *BurndownServiceImpl) EnableBurndownTracking(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) error {
	// TODO: 实现自动跟踪的启用逻辑
	b.logger.Info("启用燃尽图自动跟踪", zap.String("sprint_id", sprintID.String()))
	return nil
}

// DisableBurndownTracking 禁用燃尽图跟踪
func (b *BurndownServiceImpl) DisableBurndownTracking(ctx context.Context, sprintID uuid.UUID, userID, tenantID uuid.UUID) error {
	// TODO: 实现自动跟踪的禁用逻辑
	b.logger.Info("禁用燃尽图自动跟踪", zap.String("sprint_id", sprintID.String()))
	return nil
}


// contains 检查字符串是否包含子字符串
func contains(s, substr string) bool {
	return len(s) >= len(substr) && s[len(s)-len(substr):] == substr
}

// 表名设置
func (BurndownSnapshot) TableName() string {
	return "burndown_snapshots"
}